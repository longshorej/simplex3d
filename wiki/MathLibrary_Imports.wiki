#summary Using overloaded imports to suit your needs.

Math library is separated into one base module and several mutually independent modules:
  * Integer module (intm)
  * Float module (floatm)
  * Double (doublem).
You can download a combination of modules that covers your needs. Or, alternatively, you can download a distribution with all the modules and remove the ones you do not use. Simply unzip the jar, remove the corresponding directories (intm, floatm or doublem), zip the remaining files and rename the resulting file to have `.jar` extension.

Base module consist of boolean vectors and BaseMath object that performs operations on boolean vectors and contains convenient function to cast datatypes. To use the base module, insert the following imports:
{{{
import simplex3d.math._ // boolean vectors
import simplex3d.math.BaseMath._ // casting and some boolean operations
}}}

Int module contains integer vectors. The corresponding IntMath object contains function to operate on those vectors.
{{{
import simplex3d.math.intm._ // all the int vectors
// It is recommended to use fully qualified names for int functions "IntMath.function()"
// to avoid name collisions, however sometimes you may find it useful to import.
import simplex3d.math.intm.IntMath._
}}}

Float modules contains float vectors, float matrices, and most of the functions.
{{{
import simplex3d.math.floatm._ // all the float vectors and matrices
import simplex3d.math.floatm.FloatMath._ // all the float math functions
}}}

Double module contains a mirror image of the float module, with all the types replaced with doubles and all the functions adjusted accordingly.
{{{
import simplex3d.math.doublem._ // all the double vectors and matrices
import simplex3d.math.doublem.DoubleMath._ // all the double math functions
}}}

To distinguish between float and double types you need to append an "f" or a "d" at the end of the type name. For example: Vec2f is a float vector with x and y components, and Mat4d is a 4x4 matrix with double components.

If you choose Float or Double type as your default floating-point type you can use alternative imports that allow you to drop "f" or "d" at the end of the type name.

Float as default floating-point type:
{{{
// alternative import, using short names for Float data types
import simplex3d.math.floatm.renamed._
import simplex3d.math.floatm.FloatMath._

// float examples
val v2: Vec2 = Vec2(1, 2) // the type of v2 is Vec2f
val v3 = Vec3(1, 2, 3) // the type of v3 is Vec3f
val m = Mat3(1) // the type of m is Mat3f
}}}

Double as default floating-point type:
{{{
// alternative import, using short names for Double data types
import simplex3d.math.doublem.renamed._
import simplex3d.math.doublem.DoubleMath._

// double examples
val v2: Vec2 = Vec2(1, 2) // the type of v2 is Vec2d
val v3 = Vec3(1, 2, 3) // the type of v3 is Vec3d
val m = Mat3(1) // the type of m is Mat3d
}}}

You can choose default floating point type and still use the other type by specifying the full name. In the following example the default type is Float, and you can still use Double by specifying the full type name (with "d" appended):
{{{
import simplex3d.math.floatm.renamed._ // using short names for Float data types
import simplex3d.math.doublem._ // using full names for Double data types

val m = Mat4(1) // the type of m is Mat4f
val n = Mat3d(1) // the type of n is Mat3d
}}}